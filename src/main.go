package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/gorilla/mux"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"

	_ "go-restfulapi-swagger/src/docs" // docs is generated by Swag CLI, you have to import it
	"go-restfulapi-swagger/src/models"
	"go-restfulapi-swagger/src/response"

	httpSwagger "github.com/swaggo/http-swagger"
)

var psqlInfo string

// getUsers godoc
// @Summary Get details of all users
// @Description Get details of all users
// @Tags users
// @Accept  json
// @Produce  json
// @Success 200 {object} models.User
// @Failure 500 {object} models.User
// @Router /users [get]
func getUsers(w http.ResponseWriter, r *http.Request) {
	db, err := gorm.Open("postgres", psqlInfo)
	if err != nil {
		panic("failed to connect database")
	}
	defer db.Close()

	var users []models.User
	db.Find(&users)

	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(users)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
}

// getUser godoc
// @Summary Retrieves user based on given id
// @Description get detail by ID
// @ID get-user-detail-by-userid
// @Tags users
// @Accept  json
// @Produce  json
// @Param id path int true "User ID"
// @Success 200 {object} response.JSONSuccessResult{data=models.User,code=int,message=string}
// @Failure 400 {object} response.JSONBadRequest{code=int,message=string}
// @Failure 500 {object} response.JSONIntServerErrReqResult{code=int,message=string}
// @Router /users/{id} [get]
func getUser(w http.ResponseWriter, r *http.Request) {
	var params = mux.Vars(r) // Get params
	var user models.User

	db, err := gorm.Open("postgres", psqlInfo)
	if err != nil {
		response.FailResponse(w, 500, "Errore connessione al database")
		return
	} else {
		err = db.Debug().Where("ID = ?", params["id"]).First(&user).Error
		if errors.Is(err, gorm.ErrRecordNotFound) {
			response.FailResponse(w, 400, "Record non trovato")
			return
		}
		response.SuccessResponse(w, &user)
	}
	defer db.Close()
}

// createUser godoc
// @Summary Create a new user with the input paylod
// @Description Create new user
// @Tags users
// @Accept  json
// @Produce  json
// @Param user body models.User true "Create User"
// @Success 200 {object} models.User
// @Failure 500 {object} models.User
// @Router /users [post]
func createUser(w http.ResponseWriter, r *http.Request) {
	db, err := gorm.Open("postgres", psqlInfo)
	if err != nil {
		panic("failed to connect database")
	}
	defer db.Close()

	var user models.User
	_ = json.NewDecoder(r.Body).Decode(&user)

	db.Debug().Create(&user)

	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(&user)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
}

// updateUser godoc
// @Summary Update user based on given id
// @Description Update user based on given id
// @ID user-by-userid
// @Tags users
// @Accept  json
// @Produce  json
// @Param id path int true "User ID"
// @Success 200 {object} models.User
// @Failure 500 {object} models.User
// @Router /users/{id} [put]
func updateUser(w http.ResponseWriter, r *http.Request) {
	db, err := gorm.Open("postgres", psqlInfo)
	if err != nil {
		panic("failed to connect database")
	}
	defer db.Close()

	var params = mux.Vars(r) // Get params
	var upduser, user models.User
	_ = json.NewDecoder(r.Body).Decode(&upduser)

	db.Debug().Where("ID = ?", params["id"]).First(&user).Update(&upduser)

	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(&user)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
}

// deleteUser godoc
// @Summary Remove user based on given id
// @Description Remove user based on given id
// @ID user-by-userid
// @Tags users
// @Accept  json
// @Produce  json
// @Param id path int true "User ID"
// @Success 200 {object} models.User
// @Failure 500 {object} models.User
// @Router /users/{id} [delete]
func deleteUser(w http.ResponseWriter, r *http.Request) {
	db, err := gorm.Open("postgres", psqlInfo)
	if err != nil {
		panic("failed to connect database")
	}
	defer db.Close()

	var params = mux.Vars(r) // Get params
	var user models.User

	db.Debug().Where("ID = ?", params["id"]).Delete(&user)

	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(&user)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
}

func handleRequests() {
	myRouter := mux.NewRouter().StrictSlash(true)

	myRouter.HandleFunc("/api/users", getUsers).Methods("GET")
	myRouter.HandleFunc("/api/users/{id}", getUser).Methods("GET")
	myRouter.HandleFunc("/api/users", createUser).Methods("POST")
	myRouter.HandleFunc("/api/users/{id}", updateUser).Methods("PUT")
	myRouter.HandleFunc("/api/users/{id}", deleteUser).Methods("DELETE")

	// Swagger
	myRouter.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)

	log.Fatal(http.ListenAndServe(":8080", myRouter))
}

func initialMigration() {
	db, err := gorm.Open("postgres", psqlInfo)
	if err != nil {
		fmt.Println(err.Error())
		panic("failed to connect database")
	}
	defer db.Close()

	// Migrate the schema
	db.AutoMigrate(&models.User{})

	db.LogMode(true)
	db.SetLogger(log.New(os.Stdout, "\r\n", 0))
}

func initialDbConnection() {
	var host = "localhost"
	var port = "5432"
	var user = "postgres"
	var password = ""
	var dbname = "users"

	psqlInfo = fmt.Sprintf("host=%s port=%s user=%s "+
		"password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)

	log.Println(psqlInfo)
}

// @title Users API
// @version 1.0
// @description Un semplice servizio demo per la gestione degli utenti
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.email dventurini@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api
func main() {
	log.Println("Service RESTful::User started")

	initialDbConnection()

	initialMigration()

	// Handle Subsequent requests
	handleRequests()
}
